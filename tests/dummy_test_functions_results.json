{
    "function1": {
        "start": 4,
        "length": 11,
        "sections": {
            "summary": "    \"\"\"\n    AZrojrltndflg lejkkjntgdf\n\n    ",
            "delimiter": "Parameters\n    ----------\n",
            "parameters": "    arg1: test\n\n    Returns\n    -------\n\n    \"\"\""
        },
        "docstring": [
            "from typing import Iterable, Optional",
            "",
            "",
            "def function1(arg1: str):",
            "    \"\"\"",
            "    AZrojrltndflg lejkkjntgdf",
            "",
            "    Parameters",
            "    ----------",
            "    arg1 (str): test",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function2(arg1: list, ) -> str:",
            "    \"\"\"A function doing something",
            "",
            "",
            "    Second paragraph.",
            "    ",
            "    Third paragraph",
            "    Parameters",
            "    ----------",
            "    arg1 (list): This does something",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function3(arg1: Optional[Iterable] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: this does that",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            ") -> \"Union[pd.DataFrame, pd.Series]\":",
            "    \"\"\"Compute the difference of values with respect to ref_id.",
            "",
            "    Parameters",
            "    ----------",
            "    values: values to compute from",
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "     index from values.",
            "    -------",
            "",
            "    \"\"\"",
            "    # ref_values = _get_ref_values(values, ref_id)",
            "    # return values - ref_values",
            "    pass"
        ]
    },
    "function2": {
        "start": 19,
        "length": 11,
        "sections": {
            "summary": "    \"\"\"A function doing something\n\n\n    Second paragraph.\n    \n    Third paragraph\n    ",
            "delimiter": "Parameters\n    ----------\n",
            "parameters": "    arg1 (list): This does something\n\n    \"\"\""
        },
        "docstring": [
            "from typing import Iterable, Optional",
            "",
            "",
            "def function1(arg1: str):",
            "    \"\"\"",
            "    AZrojrltndflg lejkkjntgdf",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: test",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function2(arg1: list, ) -> str:",
            "    \"\"\"A function doing something",
            "",
            "",
            "    Second paragraph.",
            "    ",
            "    Third paragraph",
            "    Parameters",
            "    ----------",
            "    arg1 (list): This does something",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function3(arg1: Optional[Iterable] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: this does that",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            ") -> \"Union[pd.DataFrame, pd.Series]\":",
            "    \"\"\"Compute the difference of values with respect to ref_id.",
            "",
            "    Parameters",
            "    ----------",
            "    values: values to compute from",
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "     index from values.",
            "    -------",
            "",
            "    \"\"\"",
            "    # ref_values = _get_ref_values(values, ref_id)",
            "    # return values - ref_values",
            "    pass"
        ]
    },
    "function3": {
        "start": 34,
        "length": 10,
        "sections": {
            "summary": "    \"\"\"\n\n    ",
            "delimiter": "Parameters\n    ----------\n",
            "parameters": "    arg1\n\n    Returns\n    -------\n\n    \"\"\""
        },
        "docstring": [
            "from typing import Iterable, Optional",
            "",
            "",
            "def function1(arg1: str):",
            "    \"\"\"",
            "    AZrojrltndflg lejkkjntgdf",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: test",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function2(arg1: list, ) -> str:",
            "    \"\"\"A function doing something",
            "",
            "",
            "    Second paragraph.",
            "    ",
            "    Third paragraph",
            "    Parameters",
            "    ----------",
            "    arg1 (list): This does something",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function3(arg1: Optional[Iterable] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: this does that",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            ") -> \"Union[pd.DataFrame, pd.Series]\":",
            "    \"\"\"Compute the difference of values with respect to ref_id.",
            "",
            "    Parameters",
            "    ----------",
            "    values: values to compute from",
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "     index from values.",
            "    -------",
            "",
            "    \"\"\"",
            "    # ref_values = _get_ref_values(values, ref_id)",
            "    # return values - ref_values",
            "    pass"
        ]
    },
    "function4": {
        "start": 48,
        "length": 10,
        "sections": {
            "summary": "    \"\"\"\n\n    ",
            "delimiter": "Parameters\n    ----------\n",
            "parameters": "    arg1: this does that\n\n    Returns\n    -------\n\n    \"\"\""
        },
        "docstring": [
            "from typing import Iterable, Optional",
            "",
            "",
            "def function1(arg1: str):",
            "    \"\"\"",
            "    AZrojrltndflg lejkkjntgdf",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: test",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function2(arg1: list, ) -> str:",
            "    \"\"\"A function doing something",
            "",
            "",
            "    Second paragraph.",
            "    ",
            "    Third paragraph",
            "    Parameters",
            "    ----------",
            "    arg1 (list): This does something",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function3(arg1: Optional[Iterable] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1 (Optional[Iterable]): this does that",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            ") -> \"Union[pd.DataFrame, pd.Series]\":",
            "    \"\"\"Compute the difference of values with respect to ref_id.",
            "",
            "    Parameters",
            "    ----------",
            "    values: values to compute from",
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "     index from values.",
            "    -------",
            "",
            "    \"\"\"",
            "    # ref_values = _get_ref_values(values, ref_id)",
            "    # return values - ref_values",
            "    pass"
        ]
    },
    "delta": {
        "start": 64,
        "length": 10,
        "sections": {
            "summary": "    \"\"\"Compute the difference of values with respect to ref_id.\n\n    ",
            "delimiter": "Parameters\n    ----------\n",
            "parameters": "    values: values to compute from\n    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid\n     index from values.\n    -------\n\n    \"\"\""
        },
        "docstring": [
            "from typing import Iterable, Optional",
            "",
            "",
            "def function1(arg1: str):",
            "    \"\"\"",
            "    AZrojrltndflg lejkkjntgdf",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: test",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function2(arg1: list, ) -> str:",
            "    \"\"\"A function doing something",
            "",
            "",
            "    Second paragraph.",
            "    ",
            "    Third paragraph",
            "    Parameters",
            "    ----------",
            "    arg1 (list): This does something",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function3(arg1: Optional[Iterable] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1: this does that",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\"",
            "    pass",
            "",
            "",
            "def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            ") -> \"Union[pd.DataFrame, pd.Series]\":",
            "    \"\"\"Compute the difference of values with respect to ref_id.",
            "",
            "    Parameters",
            "    ----------",
            "    values (Union[pd.DataFrame, pd.Series]): values to compute from",
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "     index from values.",
            "    -------",
            "",
            "    \"\"\"",
            "    # ref_values = _get_ref_values(values, ref_id)",
            "    # return values - ref_values",
            "    pass"
        ]
    }
}