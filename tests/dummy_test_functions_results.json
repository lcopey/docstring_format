{
    "get_functions": [
        "function1",
        "function2",
        "function3",
        "function4",
        "delta",
        "delta_w_returns"
    ],
    "get_docstring_start_and_length": [
        [
            5,
            11
        ],
        [
            20,
            11
        ],
        [
            35,
            10
        ],
        [
            49,
            10
        ],
        [
            65,
            10
        ],
        [
            83,
            12
        ]
    ],
    "parse_sections": [
        {
            "name": "Summary",
            "type": "SectionType.SUMMARY",
            "start": 0,
            "length": 8,
            "offset": "",
            "lines": [
                "from typing import Iterable, Optional, Union",
                "import pandas as pd",
                "",
                "",
                "def function1(arg1: str):",
                "    \"\"\"",
                "    AZrojrltndflg lejkkjntgdf",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Parameters",
            "type": "SectionType.PARAMETER_DELIMITER",
            "start": 8,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    Parameters",
                "    ----------"
            ],
            "annotation": null
        },
        {
            "name": "arg1",
            "type": "SectionType.ARG",
            "start": 10,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    arg1: test",
                ""
            ],
            "annotation": "str"
        },
        {
            "name": "Returns",
            "type": "SectionType.RETURNS",
            "start": 12,
            "length": 86,
            "offset": "    ",
            "lines": [
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function2(arg1: list, ) -> str:",
                "    \"\"\"A function doing something",
                "",
                "",
                "    Second paragraph.",
                "    ",
                "    Third paragraph",
                "    Parameters",
                "    ----------",
                "    arg1 (list): This does something",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function3(arg1: Optional[Iterable] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: this does that",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def delta(",
                "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
                ") -> \"Union[pd.DataFrame, pd.Series]\":",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass",
                "",
                "",
                "def delta_w_returns(",
                "        values: Union[pd.DataFrame, pd.Series], ref_id",
                ") -> Union[pd.DataFrame, pd.Series]:",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass"
            ],
            "annotation": null
        },
        {
            "name": "Summary",
            "type": "SectionType.SUMMARY",
            "start": 0,
            "length": 8,
            "offset": "",
            "lines": [
                "from typing import Iterable, Optional, Union",
                "import pandas as pd",
                "",
                "",
                "def function1(arg1: str):",
                "    \"\"\"",
                "    AZrojrltndflg lejkkjntgdf",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Parameters",
            "type": "SectionType.PARAMETER_DELIMITER",
            "start": 8,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    Parameters",
                "    ----------"
            ],
            "annotation": null
        },
        {
            "name": "arg1",
            "type": "SectionType.ARG",
            "start": 10,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    arg1: test",
                ""
            ],
            "annotation": "list"
        },
        {
            "name": "Returns",
            "type": "SectionType.RETURNS",
            "start": 12,
            "length": 86,
            "offset": "    ",
            "lines": [
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function2(arg1: list, ) -> str:",
                "    \"\"\"A function doing something",
                "",
                "",
                "    Second paragraph.",
                "    ",
                "    Third paragraph",
                "    Parameters",
                "    ----------",
                "    arg1 (list): This does something",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function3(arg1: Optional[Iterable] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: this does that",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def delta(",
                "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
                ") -> \"Union[pd.DataFrame, pd.Series]\":",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass",
                "",
                "",
                "def delta_w_returns(",
                "        values: Union[pd.DataFrame, pd.Series], ref_id",
                ") -> Union[pd.DataFrame, pd.Series]:",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass"
            ],
            "annotation": "str"
        },
        {
            "name": "Summary",
            "type": "SectionType.SUMMARY",
            "start": 0,
            "length": 8,
            "offset": "",
            "lines": [
                "from typing import Iterable, Optional, Union",
                "import pandas as pd",
                "",
                "",
                "def function1(arg1: str):",
                "    \"\"\"",
                "    AZrojrltndflg lejkkjntgdf",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Parameters",
            "type": "SectionType.PARAMETER_DELIMITER",
            "start": 8,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    Parameters",
                "    ----------"
            ],
            "annotation": null
        },
        {
            "name": "arg1",
            "type": "SectionType.ARG",
            "start": 10,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    arg1: test",
                ""
            ],
            "annotation": "Optional[Iterable]"
        },
        {
            "name": "Returns",
            "type": "SectionType.RETURNS",
            "start": 12,
            "length": 86,
            "offset": "    ",
            "lines": [
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function2(arg1: list, ) -> str:",
                "    \"\"\"A function doing something",
                "",
                "",
                "    Second paragraph.",
                "    ",
                "    Third paragraph",
                "    Parameters",
                "    ----------",
                "    arg1 (list): This does something",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function3(arg1: Optional[Iterable] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: this does that",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def delta(",
                "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
                ") -> \"Union[pd.DataFrame, pd.Series]\":",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass",
                "",
                "",
                "def delta_w_returns(",
                "        values: Union[pd.DataFrame, pd.Series], ref_id",
                ") -> Union[pd.DataFrame, pd.Series]:",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass"
            ],
            "annotation": "dict"
        },
        {
            "name": "Summary",
            "type": "SectionType.SUMMARY",
            "start": 0,
            "length": 8,
            "offset": "",
            "lines": [
                "from typing import Iterable, Optional, Union",
                "import pandas as pd",
                "",
                "",
                "def function1(arg1: str):",
                "    \"\"\"",
                "    AZrojrltndflg lejkkjntgdf",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Parameters",
            "type": "SectionType.PARAMETER_DELIMITER",
            "start": 8,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    Parameters",
                "    ----------"
            ],
            "annotation": null
        },
        {
            "name": "arg1",
            "type": "SectionType.ARG",
            "start": 10,
            "length": 2,
            "offset": "    ",
            "lines": [
                "    arg1: test",
                ""
            ],
            "annotation": "Optional[Iterable]"
        },
        {
            "name": "Returns",
            "type": "SectionType.RETURNS",
            "start": 12,
            "length": 86,
            "offset": "    ",
            "lines": [
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function2(arg1: list, ) -> str:",
                "    \"\"\"A function doing something",
                "",
                "",
                "    Second paragraph.",
                "    ",
                "    Third paragraph",
                "    Parameters",
                "    ----------",
                "    arg1 (list): This does something",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function3(arg1: Optional[Iterable] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: this does that",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def delta(",
                "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
                ") -> \"Union[pd.DataFrame, pd.Series]\":",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass",
                "",
                "",
                "def delta_w_returns(",
                "        values: Union[pd.DataFrame, pd.Series], ref_id",
                ") -> Union[pd.DataFrame, pd.Series]:",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass"
            ],
            "annotation": "dict"
        },
        {
            "name": "Summary",
            "type": "SectionType.SUMMARY",
            "start": 0,
            "length": 8,
            "offset": "",
            "lines": [
                "from typing import Iterable, Optional, Union",
                "import pandas as pd",
                "",
                "",
                "def function1(arg1: str):",
                "    \"\"\"",
                "    AZrojrltndflg lejkkjntgdf",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Parameters",
            "type": "SectionType.PARAMETER_DELIMITER",
            "start": 8,
            "length": 4,
            "offset": "    ",
            "lines": [
                "    Parameters",
                "    ----------",
                "    arg1: test",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Returns",
            "type": "SectionType.RETURNS",
            "start": 12,
            "length": 51,
            "offset": "    ",
            "lines": [
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function2(arg1: list, ) -> str:",
                "    \"\"\"A function doing something",
                "",
                "",
                "    Second paragraph.",
                "    ",
                "    Third paragraph",
                "    Parameters",
                "    ----------",
                "    arg1 (list): This does something",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function3(arg1: Optional[Iterable] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: this does that",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def delta("
            ],
            "annotation": "Union[pd.DataFrame, pd.Series]"
        },
        {
            "name": "values",
            "type": "SectionType.ARG",
            "start": 63,
            "length": 7,
            "offset": "        ",
            "lines": [
                "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
                ") -> \"Union[pd.DataFrame, pd.Series]\":",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from"
            ],
            "annotation": "Union[pd.DataFrame, pd.Series]"
        },
        {
            "name": "ref_id",
            "type": "SectionType.ARG",
            "start": 70,
            "length": 28,
            "offset": "    ",
            "lines": [
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass",
                "",
                "",
                "def delta_w_returns(",
                "        values: Union[pd.DataFrame, pd.Series], ref_id",
                ") -> Union[pd.DataFrame, pd.Series]:",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass"
            ],
            "annotation": null
        },
        {
            "name": "Summary",
            "type": "SectionType.SUMMARY",
            "start": 0,
            "length": 8,
            "offset": "",
            "lines": [
                "from typing import Iterable, Optional, Union",
                "import pandas as pd",
                "",
                "",
                "def function1(arg1: str):",
                "    \"\"\"",
                "    AZrojrltndflg lejkkjntgdf",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Parameters",
            "type": "SectionType.PARAMETER_DELIMITER",
            "start": 8,
            "length": 4,
            "offset": "    ",
            "lines": [
                "    Parameters",
                "    ----------",
                "    arg1: test",
                ""
            ],
            "annotation": null
        },
        {
            "name": "Returns",
            "type": "SectionType.RETURNS",
            "start": 12,
            "length": 51,
            "offset": "    ",
            "lines": [
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function2(arg1: list, ) -> str:",
                "    \"\"\"A function doing something",
                "",
                "",
                "    Second paragraph.",
                "    ",
                "    Third paragraph",
                "    Parameters",
                "    ----------",
                "    arg1 (list): This does something",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function3(arg1: Optional[Iterable] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: this does that",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    pass",
                "",
                "",
                "def delta("
            ],
            "annotation": "Union[pd.DataFrame, pd.Series]"
        },
        {
            "name": "values",
            "type": "SectionType.ARG",
            "start": 63,
            "length": 7,
            "offset": "        ",
            "lines": [
                "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
                ") -> \"Union[pd.DataFrame, pd.Series]\":",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from"
            ],
            "annotation": "Union[pd.DataFrame, pd.Series]"
        },
        {
            "name": "ref_id",
            "type": "SectionType.ARG",
            "start": 70,
            "length": 28,
            "offset": "    ",
            "lines": [
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass",
                "",
                "",
                "def delta_w_returns(",
                "        values: Union[pd.DataFrame, pd.Series], ref_id",
                ") -> Union[pd.DataFrame, pd.Series]:",
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\"",
                "    # ref_values = _get_ref_values(values, ref_id)",
                "    # return values - ref_values",
                "    pass"
            ],
            "annotation": null
        }
    ],
    "docstrings": [
        {
            "lines": [
                "    \"\"\"",
                "    AZrojrltndflg lejkkjntgdf",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: test",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\""
            ],
            "start": 5,
            "length": 11,
            "offset": "    ",
            "sections": [
                {
                    "name": "Summary",
                    "type": "SectionType.SUMMARY",
                    "start": 0,
                    "length": 3,
                    "offset": "    ",
                    "lines": [
                        "    \"\"\"",
                        "    AZrojrltndflg lejkkjntgdf",
                        ""
                    ],
                    "annotation": null
                },
                {
                    "name": "Parameters",
                    "type": "SectionType.PARAMETER_DELIMITER",
                    "start": 3,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    Parameters",
                        "    ----------"
                    ],
                    "annotation": null
                },
                {
                    "name": "arg1",
                    "type": "SectionType.ARG",
                    "start": 5,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    arg1: test",
                        ""
                    ],
                    "annotation": "str"
                },
                {
                    "name": "Returns",
                    "type": "SectionType.RETURNS",
                    "start": 7,
                    "length": 4,
                    "offset": "    ",
                    "lines": [
                        "    Returns",
                        "    -------",
                        "",
                        "    \"\"\""
                    ],
                    "annotation": null
                }
            ]
        },
        {
            "lines": [
                "    \"\"\"A function doing something",
                "",
                "",
                "    Second paragraph.",
                "    ",
                "    Third paragraph",
                "    Parameters",
                "    ----------",
                "    arg1 (list): This does something",
                "",
                "    \"\"\""
            ],
            "start": 20,
            "length": 11,
            "offset": "    ",
            "sections": [
                {
                    "name": "Summary",
                    "type": "SectionType.SUMMARY",
                    "start": 0,
                    "length": 6,
                    "offset": "    ",
                    "lines": [
                        "    \"\"\"A function doing something",
                        "",
                        "",
                        "    Second paragraph.",
                        "    ",
                        "    Third paragraph"
                    ],
                    "annotation": null
                },
                {
                    "name": "Parameters",
                    "type": "SectionType.PARAMETER_DELIMITER",
                    "start": 6,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    Parameters",
                        "    ----------"
                    ],
                    "annotation": null
                },
                {
                    "name": "arg1",
                    "type": "SectionType.ARG",
                    "start": 8,
                    "length": 3,
                    "offset": "    ",
                    "lines": [
                        "    arg1 (list): This does something",
                        "",
                        "    \"\"\""
                    ],
                    "annotation": "list"
                }
            ]
        },
        {
            "lines": [
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\""
            ],
            "start": 35,
            "length": 10,
            "offset": "    ",
            "sections": [
                {
                    "name": "Summary",
                    "type": "SectionType.SUMMARY",
                    "start": 0,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    \"\"\"",
                        ""
                    ],
                    "annotation": null
                },
                {
                    "name": "Parameters",
                    "type": "SectionType.PARAMETER_DELIMITER",
                    "start": 2,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    Parameters",
                        "    ----------"
                    ],
                    "annotation": null
                },
                {
                    "name": "arg1",
                    "type": "SectionType.ARG",
                    "start": 4,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    arg1",
                        ""
                    ],
                    "annotation": "Optional[Iterable]"
                },
                {
                    "name": "Returns",
                    "type": "SectionType.RETURNS",
                    "start": 6,
                    "length": 4,
                    "offset": "    ",
                    "lines": [
                        "    Returns",
                        "    -------",
                        "",
                        "    \"\"\""
                    ],
                    "annotation": "dict"
                }
            ]
        },
        {
            "lines": [
                "    \"\"\"",
                "",
                "    Parameters",
                "    ----------",
                "    arg1: this does that",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\""
            ],
            "start": 49,
            "length": 10,
            "offset": "    ",
            "sections": [
                {
                    "name": "Summary",
                    "type": "SectionType.SUMMARY",
                    "start": 0,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    \"\"\"",
                        ""
                    ],
                    "annotation": null
                },
                {
                    "name": "Parameters",
                    "type": "SectionType.PARAMETER_DELIMITER",
                    "start": 2,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    Parameters",
                        "    ----------"
                    ],
                    "annotation": null
                },
                {
                    "name": "arg1",
                    "type": "SectionType.ARG",
                    "start": 4,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    arg1: this does that",
                        ""
                    ],
                    "annotation": "Optional[Iterable]"
                },
                {
                    "name": "Returns",
                    "type": "SectionType.RETURNS",
                    "start": 6,
                    "length": 4,
                    "offset": "    ",
                    "lines": [
                        "    Returns",
                        "    -------",
                        "",
                        "    \"\"\""
                    ],
                    "annotation": "dict"
                }
            ]
        },
        {
            "lines": [
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "    -------",
                "",
                "    \"\"\""
            ],
            "start": 65,
            "length": 10,
            "offset": "    ",
            "sections": [
                {
                    "name": "Summary",
                    "type": "SectionType.SUMMARY",
                    "start": 0,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    \"\"\"Compute the difference of values with respect to ref_id.",
                        ""
                    ],
                    "annotation": null
                },
                {
                    "name": "Parameters",
                    "type": "SectionType.PARAMETER_DELIMITER",
                    "start": 2,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    Parameters",
                        "    ----------"
                    ],
                    "annotation": null
                },
                {
                    "name": "values",
                    "type": "SectionType.ARG",
                    "start": 4,
                    "length": 1,
                    "offset": "    ",
                    "lines": [
                        "    values: values to compute from"
                    ],
                    "annotation": "Union[pd.DataFrame, pd.Series]"
                },
                {
                    "name": "ref_id",
                    "type": "SectionType.ARG",
                    "start": 5,
                    "length": 5,
                    "offset": "    ",
                    "lines": [
                        "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                        "     index from values.",
                        "    -------",
                        "",
                        "    \"\"\""
                    ],
                    "annotation": null
                }
            ]
        },
        {
            "lines": [
                "    \"\"\"Compute the difference of values with respect to ref_id.",
                "",
                "    Parameters",
                "    ----------",
                "    values: values to compute from",
                "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                "     index from values.",
                "",
                "    Returns",
                "    -------",
                "",
                "    \"\"\""
            ],
            "start": 83,
            "length": 12,
            "offset": "    ",
            "sections": [
                {
                    "name": "Summary",
                    "type": "SectionType.SUMMARY",
                    "start": 0,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    \"\"\"Compute the difference of values with respect to ref_id.",
                        ""
                    ],
                    "annotation": null
                },
                {
                    "name": "Parameters",
                    "type": "SectionType.PARAMETER_DELIMITER",
                    "start": 2,
                    "length": 2,
                    "offset": "    ",
                    "lines": [
                        "    Parameters",
                        "    ----------"
                    ],
                    "annotation": null
                },
                {
                    "name": "values",
                    "type": "SectionType.ARG",
                    "start": 4,
                    "length": 1,
                    "offset": "    ",
                    "lines": [
                        "    values: values to compute from"
                    ],
                    "annotation": "Union[pd.DataFrame, pd.Series]"
                },
                {
                    "name": "ref_id",
                    "type": "SectionType.ARG",
                    "start": 5,
                    "length": 3,
                    "offset": "    ",
                    "lines": [
                        "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
                        "     index from values.",
                        ""
                    ],
                    "annotation": null
                },
                {
                    "name": "Returns",
                    "type": "SectionType.RETURNS",
                    "start": 8,
                    "length": 4,
                    "offset": "    ",
                    "lines": [
                        "    Returns",
                        "    -------",
                        "",
                        "    \"\"\""
                    ],
                    "annotation": "Union[pd.DataFrame, pd.Series]"
                }
            ]
        }
    ],
    "sections_cleaned": [
        [
            "from typing import Iterable, Optional, Union",
            "import pandas as pd",
            "",
            "def function1(arg1: str):",
            "\"\"\"",
            "AZrojrltndflg lejkkjntgdf"
        ],
        [
            "",
            "    Parameters",
            "    ----------"
        ],
        [
            "    arg1 : str",
            "        Test"
        ],
        [
            "",
            "    Returns",
            "    -------",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function2(arg1: list, ) -> str:",
            "        \"\"\"A function doing something",
            "        ",
            "        ",
            "        Second paragraph.",
            "        ",
            "        Third paragraph",
            "        Parameters",
            "        ----------",
            "        arg1 (list): This does something",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function3(arg1: Optional[Iterable] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1: this does that",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            "        ) -> \"Union[pd.DataFrame, pd.Series]\":",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass",
            "        ",
            "        ",
            "        def delta_w_returns(",
            "        values: Union[pd.DataFrame, pd.Series], ref_id",
            "        ) -> Union[pd.DataFrame, pd.Series]:",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass"
        ],
        [
            "from typing import Iterable, Optional, Union",
            "import pandas as pd",
            "",
            "def function1(arg1: str):",
            "\"\"\"",
            "AZrojrltndflg lejkkjntgdf"
        ],
        [
            "",
            "    Parameters",
            "    ----------"
        ],
        [
            "    arg1 : list",
            "        Test"
        ],
        [
            "",
            "    Returns",
            "    -------",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function2(arg1: list, ) -> str:",
            "        \"\"\"A function doing something",
            "        ",
            "        ",
            "        Second paragraph.",
            "        ",
            "        Third paragraph",
            "        Parameters",
            "        ----------",
            "        arg1 (list): This does something",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function3(arg1: Optional[Iterable] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1: this does that",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            "        ) -> \"Union[pd.DataFrame, pd.Series]\":",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass",
            "        ",
            "        ",
            "        def delta_w_returns(",
            "        values: Union[pd.DataFrame, pd.Series], ref_id",
            "        ) -> Union[pd.DataFrame, pd.Series]:",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass"
        ],
        [
            "from typing import Iterable, Optional, Union",
            "import pandas as pd",
            "",
            "def function1(arg1: str):",
            "\"\"\"",
            "AZrojrltndflg lejkkjntgdf"
        ],
        [
            "",
            "    Parameters",
            "    ----------"
        ],
        [
            "    arg1 : Optional[Iterable]",
            "        Test"
        ],
        [
            "",
            "    Returns",
            "    -------",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function2(arg1: list, ) -> str:",
            "        \"\"\"A function doing something",
            "        ",
            "        ",
            "        Second paragraph.",
            "        ",
            "        Third paragraph",
            "        Parameters",
            "        ----------",
            "        arg1 (list): This does something",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function3(arg1: Optional[Iterable] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1: this does that",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            "        ) -> \"Union[pd.DataFrame, pd.Series]\":",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass",
            "        ",
            "        ",
            "        def delta_w_returns(",
            "        values: Union[pd.DataFrame, pd.Series], ref_id",
            "        ) -> Union[pd.DataFrame, pd.Series]:",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass"
        ],
        [
            "from typing import Iterable, Optional, Union",
            "import pandas as pd",
            "",
            "def function1(arg1: str):",
            "\"\"\"",
            "AZrojrltndflg lejkkjntgdf"
        ],
        [
            "",
            "    Parameters",
            "    ----------"
        ],
        [
            "    arg1 : Optional[Iterable]",
            "        Test"
        ],
        [
            "",
            "    Returns",
            "    -------",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function2(arg1: list, ) -> str:",
            "        \"\"\"A function doing something",
            "        ",
            "        ",
            "        Second paragraph.",
            "        ",
            "        Third paragraph",
            "        Parameters",
            "        ----------",
            "        arg1 (list): This does something",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function3(arg1: Optional[Iterable] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1: this does that",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def delta(",
            "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
            "        ) -> \"Union[pd.DataFrame, pd.Series]\":",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass",
            "        ",
            "        ",
            "        def delta_w_returns(",
            "        values: Union[pd.DataFrame, pd.Series], ref_id",
            "        ) -> Union[pd.DataFrame, pd.Series]:",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass"
        ],
        [
            "from typing import Iterable, Optional, Union",
            "import pandas as pd",
            "",
            "def function1(arg1: str):",
            "\"\"\"",
            "AZrojrltndflg lejkkjntgdf"
        ],
        [
            "",
            "    Parameters",
            "    ----------"
        ],
        [
            "",
            "    Returns",
            "    -------",
            "    Union[pd.DataFrame, pd.Series]",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function2(arg1: list, ) -> str:",
            "        \"\"\"A function doing something",
            "        ",
            "        ",
            "        Second paragraph.",
            "        ",
            "        Third paragraph",
            "        Parameters",
            "        ----------",
            "        arg1 (list): This does something",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function3(arg1: Optional[Iterable] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1: this does that",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def delta("
        ],
        [
            "        values : Union[pd.DataFrame, pd.Series]",
            "                \"union[pd.dataframe, pd.series]\", ref_id",
            "                ) -> \"Union[pd.DataFrame, pd.Series]\":",
            "                \"\"\"Compute the difference of values with respect to ref_id.",
            "                ",
            "                Parameters",
            "                ----------",
            "                values: values to compute from"
        ],
        [
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass",
            "        ",
            "        ",
            "        def delta_w_returns(",
            "        values: Union[pd.DataFrame, pd.Series], ref_id",
            "        ) -> Union[pd.DataFrame, pd.Series]:",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass"
        ],
        [
            "from typing import Iterable, Optional, Union",
            "import pandas as pd",
            "",
            "def function1(arg1: str):",
            "\"\"\"",
            "AZrojrltndflg lejkkjntgdf"
        ],
        [
            "",
            "    Parameters",
            "    ----------"
        ],
        [
            "",
            "    Returns",
            "    -------",
            "    Union[pd.DataFrame, pd.Series]",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function2(arg1: list, ) -> str:",
            "        \"\"\"A function doing something",
            "        ",
            "        ",
            "        Second paragraph.",
            "        ",
            "        Third paragraph",
            "        Parameters",
            "        ----------",
            "        arg1 (list): This does something",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function3(arg1: Optional[Iterable] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
            "        \"\"\"",
            "        ",
            "        Parameters",
            "        ----------",
            "        arg1: this does that",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        pass",
            "        ",
            "        ",
            "        def delta("
        ],
        [
            "        values : Union[pd.DataFrame, pd.Series]",
            "                \"union[pd.dataframe, pd.series]\", ref_id",
            "                ) -> \"Union[pd.DataFrame, pd.Series]\":",
            "                \"\"\"Compute the difference of values with respect to ref_id.",
            "                ",
            "                Parameters",
            "                ----------",
            "                values: values to compute from"
        ],
        [
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass",
            "        ",
            "        ",
            "        def delta_w_returns(",
            "        values: Union[pd.DataFrame, pd.Series], ref_id",
            "        ) -> Union[pd.DataFrame, pd.Series]:",
            "        \"\"\"Compute the difference of values with respect to ref_id.",
            "        ",
            "        Parameters",
            "        ----------",
            "        values: values to compute from",
            "        ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        ",
            "        Returns",
            "        -------",
            "        ",
            "        \"\"\"",
            "        # ref_values = _get_ref_values(values, ref_id)",
            "        # return values - ref_values",
            "        pass"
        ]
    ],
    "docstrings_cleaned": [
        [
            "    \"\"\"",
            "    AZrojrltndflg lejkkjntgdf",
            "",
            "    Parameters",
            "    ----------",
            "    arg1 : str",
            "        Test",
            "",
            "    Returns",
            "    -------",
            "",
            "    \"\"\""
        ],
        [
            "    \"\"\"",
            "    A function doing something",
            "    ",
            "    Second paragraph.",
            "    ",
            "    Third paragraph",
            "",
            "    Parameters",
            "    ----------",
            "    arg1 : list",
            "        This does something",
            "",
            "    \"\"\""
        ],
        [
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1 : Optional[Iterable]",
            "",
            "    Returns",
            "    -------",
            "    dict",
            "",
            "    \"\"\""
        ],
        [
            "    \"\"\"",
            "",
            "    Parameters",
            "    ----------",
            "    arg1 : Optional[Iterable]",
            "        This does that",
            "",
            "    Returns",
            "    -------",
            "    dict",
            "",
            "    \"\"\""
        ],
        [
            "    \"\"\"",
            "    Compute the difference of values with respect to ref_id.",
            "",
            "    Parameters",
            "    ----------",
            "    values : Union[pd.DataFrame, pd.Series]",
            "        Values to compute from",
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "        -------",
            "",
            "    \"\"\""
        ],
        [
            "    \"\"\"",
            "    Compute the difference of values with respect to ref_id.",
            "",
            "    Parameters",
            "    ----------",
            "    values : Union[pd.DataFrame, pd.Series]",
            "        Values to compute from",
            "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
            "        index from values.",
            "",
            "    Returns",
            "    -------",
            "    Union[pd.DataFrame, pd.Series]",
            "",
            "    \"\"\""
        ]
    ],
    "script_cleaned": [
        "from typing import Iterable, Optional, Union",
        "import pandas as pd",
        "",
        "",
        "def function1(arg1: str):",
        "    \"\"\"",
        "    AZrojrltndflg lejkkjntgdf",
        "",
        "    Parameters",
        "    ----------",
        "    arg1 : str",
        "        Test",
        "",
        "    Returns",
        "    -------",
        "",
        "    \"\"\"",
        "    pass",
        "",
        "",
        "def function2(arg1: list, ) -> str:",
        "    \"\"\"",
        "    A function doing something",
        "    ",
        "    Second paragraph.",
        "    ",
        "    Third paragraph",
        "",
        "    Parameters",
        "    ----------",
        "    arg1 : list",
        "        This does something",
        "",
        "    \"\"\"",
        "    pass",
        "",
        "",
        "def function3(arg1: Optional[Iterable] = None) -> dict:",
        "    \"\"\"",
        "",
        "    Parameters",
        "    ----------",
        "    arg1 : Optional[Iterable]",
        "",
        "    Returns",
        "    -------",
        "    dict",
        "",
        "    \"\"\"",
        "    pass",
        "",
        "",
        "def function4(arg1: Optional[Iterable] = None, arg2: Optional[tuple] = None) -> dict:",
        "    \"\"\"",
        "",
        "    Parameters",
        "    ----------",
        "    arg1 : Optional[Iterable]",
        "        This does that",
        "",
        "    Returns",
        "    -------",
        "    dict",
        "",
        "    \"\"\"",
        "    pass",
        "",
        "",
        "def delta(",
        "        values: \"Union[pd.DataFrame, pd.Series]\", ref_id",
        ") -> \"Union[pd.DataFrame, pd.Series]\":",
        "    \"\"\"",
        "    Compute the difference of values with respect to ref_id.",
        "",
        "    Parameters",
        "    ----------",
        "    values : Union[pd.DataFrame, pd.Series]",
        "        Values to compute from",
        "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
        "        index from values.",
        "        -------",
        "",
        "    \"\"\"",
        "    # ref_values = _get_ref_values(values, ref_id)",
        "    # return values - ref_values",
        "    pass",
        "",
        "",
        "def delta_w_returns(",
        "        values: Union[pd.DataFrame, pd.Series], ref_id",
        ") -> Union[pd.DataFrame, pd.Series]:",
        "    \"\"\"",
        "    Compute the difference of values with respect to ref_id.",
        "",
        "    Parameters",
        "    ----------",
        "    values : Union[pd.DataFrame, pd.Series]",
        "        Values to compute from",
        "    ref_id: delta values are computed with respect to that reference. It should be valid index or a list of valid",
        "        index from values.",
        "",
        "    Returns",
        "    -------",
        "    Union[pd.DataFrame, pd.Series]",
        "",
        "    \"\"\"",
        "    # ref_values = _get_ref_values(values, ref_id)",
        "    # return values - ref_values",
        "    pass"
    ]
}